Source: golang-github-azure-go-autorest
Section: golang
Priority: optional
Standards-Version: 4.6.1
Maintainer: Debian Go Packaging Team <team+pkg-go@tracker.debian.org>
Uploaders: Martina Ferrari <tina@debian.org>,
           Tim Potter <tpot@hpe.com>,
Build-Depends: debhelper-compat (= 13),
               dh-sequence-golang,
               golang-any,
               golang-github-dimchansky-utfbom-dev,
               golang-github-golang-jwt-jwt-dev,
               golang-github-mitchellh-go-homedir-dev,
               golang-github-stretchr-testify-dev,
               golang-golang-x-crypto-dev,
Homepage: https://github.com/Azure/go-autorest
Vcs-Browser: https://salsa.debian.org/go-team/packages/golang-github-azure-go-autorest
Vcs-Git: https://salsa.debian.org/go-team/packages/golang-github-azure-go-autorest.git
XS-Go-Import-Path: github.com/Azure/go-autorest
Rules-Requires-Root: no
Testsuite: autopkgtest-pkg-go

Package: golang-github-azure-go-autorest-dev
Architecture: all
Multi-Arch: foreign
Depends: golang-github-dimchansky-utfbom-dev,
         golang-github-golang-jwt-jwt-dev,
         golang-github-mitchellh-go-homedir-dev,
         golang-golang-x-crypto-dev,
         ${misc:Depends},
Description: HTTP request pipeline suitable for use across multiple go-routines
 Package autorest implements an HTTP request pipeline suitable for use across
 multiple go-routines and provides the shared routines relied on by AutoRest
 (see https://github.com/Azure/autorest/) generated Go code.
 .
 The package breaks sending and responding to HTTP requests into three phases:
 Preparing, Sending, and Responding.
 .
 Each phase relies on decorators to modify and / or manage processing.
 Decorators may first modify and then pass the data along, pass the data first
 and then modify the result, or wrap themselves around passing the data (such as
 a logger might do). Decorators run in the order provided.
 .
 Preparers and Responders may be shared and re-used (assuming the underlying
 decorators support sharing and re-use). Performant use is obtained by creating
 one or more Preparers and Responders shared among multiple go-routines, and a
 single Sender shared among multiple sending go-routines, all bound together by
 means of input / output channels.
 .
 Decorators hold their passed state within a closure (such as the path
 components in the example above). Be careful to share Preparers and Responders
 only in a context where such held state applies. For example, it may not make
 sense to share a Preparer that applies a query string from a fixed set of
 values. Similarly, sharing a Responder that reads the response body into a
 passed struct (e.g., ByUnmarshallingJson) is likely incorrect.
 .
 Lastly, the Swagger specification (https://swagger.io) that drives AutoRest
 (https://github.com/Azure/autorest/) precisely defines two date forms: date and
 date-time. The github.com/Azure/go-autorest/autorest/date package provides
 time.Time derivations to ensure correct parsing and formatting.
 .
 Errors raised by autorest objects and methods will conform to the
 autorest.Error interface.
